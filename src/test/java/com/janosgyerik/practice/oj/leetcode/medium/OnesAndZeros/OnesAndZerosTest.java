package com.janosgyerik.practice.oj.leetcode.medium.OnesAndZeros;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

public class OnesAndZerosTest {

    private final Solution solution = new Solution();

    private int findMaxForm(String[] strings, int m, int n) {
        return solution.findMaxForm(strings, m, n);
    }

    @Test
    public void test_1() {
        assertThat(findMaxForm(new String[]{"10", "0001", "111001", "1", "0"}, 3, 4)).isEqualTo(3);
    }

    @Test
    public void test_2() {
        assertThat(findMaxForm(new String[]{"00", "000"}, 1, 10)).isEqualTo(0);
    }

    @Test
    public void test_3() {
        assertThat(findMaxForm(new String[]{"10", "0", "1"}, 1, 1)).isEqualTo(2);
    }

    @Test
    public void test_4() {
        assertThat(findMaxForm(new String[]{"111", "1000", "1000", "1000"}, 9, 3)).isEqualTo(3);
    }

    @Test
    public void test_tle1() {
        String[] strings = {"011", "1", "11", "0", "010", "1", "10", "1", "1", "0", "0", "0", "01111", "011", "11", "00", "11", "10", "1", "0", "0", "0", "0", "101", "001110", "1", "0", "1", "0", "0", "10", "00100", "0", "10", "1", "1", "1", "011", "11", "11", "10", "10", "0000", "01", "1", "10", "0"};
        assertThat(findMaxForm(strings, 44, 39)).isEqualTo(45);
    }

    @Test
    public void test_tle2() {
        String[] strings = {};
        assertThat(findMaxForm(strings, 50, 50)).isEqualTo(50);
    }

    @Test
    public void test_tle3() {
        String[] strings = {};
        assertThat(findMaxForm(strings, 100, 100)).isEqualTo(50);
    }
}

